syntax = "proto3";

package sovereign.types.v1;

import "gogoproto/gogo.proto";

// AggregatedProof is the overarching structure, encompassing public data, proof
// data information, and aggregated proof bytes.
message AggregatedProof {
  // the public data of the aggregated proof
  AggregatedProofPublicData public_data = 1;
  // the aggregated proof bytes
  SerializedAggregatedProof serialized_proof = 2;
}

// AggregatedProofPublicData defines the public properties of the
// AggregatedProof for the Sovereign SDK rollups, utilized for verifying the
// proof.
message AggregatedProofPublicData {
  // The set of validity conditions for each block of the aggregated proof.
  repeated SerializedValidityCondition validity_conditions = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"validity_conditions\""
  ];
  // the initial slot number of the rollup from which the proof captures the
  // rollup's transition from the initial state root.
  uint64 initial_slot_number = 2;
  // the final slot number of the rollup, up to which the proof captures the
  // rollup's transition to the final state root.
  uint64 final_slot_number = 3;
  // the genesis state root
  bytes genesis_state_root = 4;
  // the initial state root
  bytes initial_state_root = 5;
  // the final state root
  bytes final_state_root = 6;
  // the initial slot hash
  bytes initial_slot_hash = 7;
  // the final slot hash
  bytes final_slot_hash = 8;
  // the code commitment of the aggregated proof circuit
  CodeCommitment code_commitment = 9 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"code_commitment\""
  ];
}

// SerializedAggregatedProof defines the raw aggregated proof structure for the
// Sovereign SDK rollups.
message SerializedAggregatedProof {
  // the rollup raw aggregated proof bytes covering a range of DA blocks
  bytes raw_aggregated_proof = 1;
}

// SerializedValidityCondition defines the serialized validity condition for
// each block of the aggregated proof
message SerializedValidityCondition {
  // the validity condition
  bytes validity_condition = 1;
}

// CodeCommitment defines the code commitment of the aggregated proof circuit
message CodeCommitment {
  // the code commitment
  bytes code_commitment = 1;
}
