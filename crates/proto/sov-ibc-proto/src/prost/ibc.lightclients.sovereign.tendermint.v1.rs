// This file is @generated by prost-build.
/// ClientState defines the client state for the Sovereign SDK rollups operating
/// on a Tendermint-based Data Availability layer.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientState {
    /// the Sovereign-specific client state parameters
    #[prost(message, optional, tag = "1")]
    pub sovereign_params: ::core::option::Option<
        super::super::v1::SovereignClientParams,
    >,
    /// the tendermint-specific client state parameters
    #[prost(message, optional, tag = "2")]
    pub tendermint_params: ::core::option::Option<TendermintClientParams>,
}
impl ::prost::Name for ClientState {
    const NAME: &'static str = "ClientState";
    const PACKAGE: &'static str = "ibc.lightclients.sovereign.tendermint.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "ibc.lightclients.sovereign.tendermint.v1.ClientState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/ibc.lightclients.sovereign.tendermint.v1.ClientState".into()
    }
}
/// TendermintClientParams contains the data necessary to verify Tendermint
/// headers
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TendermintClientParams {
    /// the identifier of the chain hosting the Tendermint consensus
    #[prost(string, tag = "1")]
    pub chain_id: ::prost::alloc::string::String,
    /// the trust level of the chain
    #[prost(message, optional, tag = "2")]
    pub trust_level: ::core::option::Option<
        ::ibc_proto::ibc::lightclients::tendermint::v1::Fraction,
    >,
    /// the duration of the staking unbonding period
    #[prost(message, optional, tag = "3")]
    pub unbonding_period: ::core::option::Option<
        ::ibc_proto::google::protobuf::Duration,
    >,
    /// the duration of new (untrusted) header's Time can drift into the future.
    #[prost(message, optional, tag = "4")]
    pub max_clock_drift: ::core::option::Option<::ibc_proto::google::protobuf::Duration>,
}
impl ::prost::Name for TendermintClientParams {
    const NAME: &'static str = "TendermintClientParams";
    const PACKAGE: &'static str = "ibc.lightclients.sovereign.tendermint.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "ibc.lightclients.sovereign.tendermint.v1.TendermintClientParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/ibc.lightclients.sovereign.tendermint.v1.TendermintClientParams".into()
    }
}
/// ConsensusState defines the consensus state for the Sovereign SDK rollups
/// operating on a Tendermint-based Data Availability layer.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConsensusState {
    /// the Sovereign-specific consensus state parameters
    #[prost(message, optional, tag = "1")]
    pub sovereign_params: ::core::option::Option<
        super::super::v1::SovereignConsensusParams,
    >,
    /// the tendermint-specific consensus state parameters
    #[prost(message, optional, tag = "2")]
    pub tendermint_params: ::core::option::Option<TendermintConsensusParams>,
}
impl ::prost::Name for ConsensusState {
    const NAME: &'static str = "ConsensusState";
    const PACKAGE: &'static str = "ibc.lightclients.sovereign.tendermint.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "ibc.lightclients.sovereign.tendermint.v1.ConsensusState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/ibc.lightclients.sovereign.tendermint.v1.ConsensusState".into()
    }
}
/// TendermintConsensusParams contains the necessary consensus state parameters
/// for verifying Tendermint headers
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TendermintConsensusParams {
    /// the timestamp that corresponds to the Data Availability header in which the
    /// rollups' ConsensusState was stored.
    #[prost(message, optional, tag = "1")]
    pub timestamp: ::core::option::Option<::ibc_proto::google::protobuf::Timestamp>,
    /// the hash of the next validator set
    #[prost(bytes = "vec", tag = "2")]
    pub next_validators_hash: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for TendermintConsensusParams {
    const NAME: &'static str = "TendermintConsensusParams";
    const PACKAGE: &'static str = "ibc.lightclients.sovereign.tendermint.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "ibc.lightclients.sovereign.tendermint.v1.TendermintConsensusParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/ibc.lightclients.sovereign.tendermint.v1.TendermintConsensusParams".into()
    }
}
/// The `trusted_height` under the `tendermint_header` is the height of a stored
/// `ConsensusState` on the client that will be used to verify the new untrusted
/// header. The trusted `ConsensusState` must be within the unbonding period of
/// current time in order to correctly verify, and the `trusted_validators` must
/// hash to the `next_validators_hash` of trusted `ConsensusState` since that is
/// the last trusted validator set at the `trusted_height`.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Header {
    /// the Tendermint header
    #[prost(message, optional, tag = "1")]
    pub tendermint_header: ::core::option::Option<
        ::ibc_proto::ibc::lightclients::tendermint::v1::Header,
    >,
    /// the Sovereign SDK rollup aggregated proof data
    #[prost(message, optional, tag = "2")]
    pub aggregated_proof: ::core::option::Option<
        super::super::super::super::super::sovereign::types::v1::AggregatedProof,
    >,
}
impl ::prost::Name for Header {
    const NAME: &'static str = "Header";
    const PACKAGE: &'static str = "ibc.lightclients.sovereign.tendermint.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "ibc.lightclients.sovereign.tendermint.v1.Header".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/ibc.lightclients.sovereign.tendermint.v1.Header".into()
    }
}
/// Misbehaviour defines the misbehaviour for the Sovereign SDK rollups operating
/// on the Tendermint-based Data Availability layer.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Misbehaviour {
    /// the client identifier
    #[prost(string, tag = "1")]
    pub client_id: ::prost::alloc::string::String,
    /// the header_1 of the Sovereign SDK rollup with Tendermint-based DA layer
    #[prost(message, optional, tag = "2")]
    pub header_1: ::core::option::Option<Header>,
    /// the header_2 of the Sovereign SDK rollup with Tendermint-based DA layer
    #[prost(message, optional, tag = "3")]
    pub header_2: ::core::option::Option<Header>,
}
impl ::prost::Name for Misbehaviour {
    const NAME: &'static str = "Misbehaviour";
    const PACKAGE: &'static str = "ibc.lightclients.sovereign.tendermint.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "ibc.lightclients.sovereign.tendermint.v1.Misbehaviour".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/ibc.lightclients.sovereign.tendermint.v1.Misbehaviour".into()
    }
}
